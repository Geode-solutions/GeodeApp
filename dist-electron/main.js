"use strict";const _=require("electron"),N=require("assert"),w=require("path"),K=require("fs"),Q=require("os"),X=require("util");var D=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},P={},M=te,Y=/^(?:\w+:)?\/\/(\S+)$/,Z=/^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/,ee=/^[^\s\.]+\.\S{2,}$/;function te(t){if(typeof t!="string")return!1;var r=t.match(Y);if(!r)return!1;var e=r[1];return e?!!(Z.test(e)||ee.test(e)):!1}var y=1e3,E=y*60,S=E*60,v=S*24,re=v*7,se=v*365.25,oe=function(t,r){r=r||{};var e=typeof t;if(e==="string"&&t.length>0)return ae(t);if(e==="number"&&isFinite(t))return r.long?ie(t):ne(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function ae(t){if(t=String(t),!(t.length>100)){var r=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(r){var e=parseFloat(r[1]),i=(r[2]||"ms").toLowerCase();switch(i){case"years":case"year":case"yrs":case"yr":case"y":return e*se;case"weeks":case"week":case"w":return e*re;case"days":case"day":case"d":return e*v;case"hours":case"hour":case"hrs":case"hr":case"h":return e*S;case"minutes":case"minute":case"mins":case"min":case"m":return e*E;case"seconds":case"second":case"secs":case"sec":case"s":return e*y;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return e;default:return}}}}function ne(t){var r=Math.abs(t);return r>=v?Math.round(t/v)+"d":r>=S?Math.round(t/S)+"h":r>=E?Math.round(t/E)+"m":r>=y?Math.round(t/y)+"s":t+"ms"}function ie(t){var r=Math.abs(t);return r>=v?T(t,r,v,"day"):r>=S?T(t,r,S,"hour"):r>=E?T(t,r,E,"minute"):r>=y?T(t,r,y,"second"):t+" ms"}function T(t,r,e,i){var u=r>=e*1.5;return Math.round(t/e)+" "+i+(u?"s":"")}var ce=M,ue=/(?:(?:[^:]+:)?[/][/])?(?:.+@)?([^/]+)([/][^?#]+)/,le=function(t,r){var e={};if(r=r||{},!t||(t.url&&(t=t.url),typeof t!="string"))return null;var i=t.match(/^([\w-_]+)\/([\w-_\.]+)(?:#([\w-_\.]+))?$/),u=t.match(/^github:([\w-_]+)\/([\w-_\.]+)(?:#([\w-_\.]+))?$/),R=t.match(/^git@[\w-_\.]+:([\w-_]+)\/([\w-_\.]+)$/);if(i)e.user=i[1],e.repo=i[2],e.branch=i[3]||"master",e.host="github.com";else if(u)e.user=u[1],e.repo=u[2],e.branch=u[3]||"master",e.host="github.com";else if(R)e.user=R[1],e.repo=R[2].replace(/\.git$/i,""),e.branch="master",e.host="github.com";else{if(t=t.replace(/^git\+/,""),!ce(t))return null;var I=t.match(ue)||[],g=I[1],U=I[2];if(!g||g!=="github.com"&&g!=="www.github.com"&&!r.enterprise)return null;var n=U.match(/^\/([\w-_]+)\/([\w-_\.]+)(\/tree\/[\%\w-_\.\/]+)?(\/blob\/[\%\w-_\.\/]+)?/);if(!n)return null;if(e.user=n[1],e.repo=n[2].replace(/\.git$/i,""),e.host=g||"github.com",n[3]&&/^\/tree\/master\//.test(n[3]))e.branch="master",e.path=n[3].replace(/\/$/,"");else if(n[3]){var d=n[3].replace(/^\/tree\//,"").match(/[\%\w-_.]*\/?[\%\w-_]+/);e.branch=d&&d[0]}else if(n[4]){var d=n[4].replace(/^\/blob\//,"").match(/[\%\w-_.]*\/?[\%\w-_]+/);e.branch=d&&d[0]}else e.branch="master"}return e.host==="github.com"?e.apiHost="api.github.com":e.apiHost=e.host+"/api/v3",e.tarball_url="https://"+e.apiHost+"/repos/"+e.user+"/"+e.repo+"/tarball/"+e.branch,e.clone_url="https://"+e.host+"/"+e.user+"/"+e.repo,e.branch==="master"?(e.https_url="https://"+e.host+"/"+e.user+"/"+e.repo,e.travis_url="https://travis-ci.org/"+e.user+"/"+e.repo,e.zip_url="https://"+e.host+"/"+e.user+"/"+e.repo+"/archive/master.zip"):(e.https_url="https://"+e.host+"/"+e.user+"/"+e.repo+"/blob/"+e.branch,e.travis_url="https://travis-ci.org/"+e.user+"/"+e.repo+"?branch="+e.branch,e.zip_url="https://"+e.host+"/"+e.user+"/"+e.repo+"/archive/"+e.branch+".zip"),e.path&&(e.https_url+=e.path),e.api_url="https://"+e.apiHost+"/repos/"+e.user+"/"+e.repo,e};const pe="update-electron-app",de="3.0.0",fe="A drop-in module that adds autoUpdating capabilities to Electron apps",he="https://github.com/electron/update-electron-app",ve="dist/index.js",ge="dist/index.d.ts",me="MIT",be={"github-url-to-object":"^4.0.4","is-url":"^1.2.4",ms:"^2.1.1"},_e={"@continuous-auth/semantic-release-npm":"^3.0.0","@types/github-url-to-object":"^4.0.1","@types/is-url":"^1.2.30","@types/ms":"^0.7.31",electron:"^22.0.0",jest:"^29.0.0",prettier:"^3.0.3",standard:"^14.3.4","standard-markdown":"^6.0.0",tsd:"^0.25.0",typescript:"^4.9.4"},we={prepare:"tsc",test:"jest && tsd && standard --fix && standard-markdown",watch:"jest --watch --notify --notifyMode=change --coverage"},ye={directory:"test"},Ee={env:{jest:!0}},Se={name:pe,version:de,description:fe,repository:he,main:ve,types:ge,license:me,dependencies:be,devDependencies:_e,scripts:we,tsd:ye,standard:Ee};(function(t){var r=D&&D.__importDefault||function(s){return s&&s.__esModule?s:{default:s}};Object.defineProperty(t,"__esModule",{value:!0}),t.updateElectronApp=t.UpdateSourceType=void 0;const e=r(N),i=r(M),u=r(oe),R=r(le),I=r(w),g=r(K),U=r(Q),n=X,d=_;var m;(function(s){s[s.ElectronPublicUpdateService=0]="ElectronPublicUpdateService",s[s.StaticStorage=1]="StaticStorage"})(m=t.UpdateSourceType||(t.UpdateSourceType={}));const k=Se,F=(0,n.format)("%s/%s (%s: %s)",k.name,k.version,U.default.platform(),U.default.arch()),H=["darwin","win32"];function B(s={}){const a=x(s);if(!d.app.isPackaged){const f="update-electron-app config looks good; aborting updates since app is in development mode";s.logger?s.logger.log(f):console.log(f);return}a.electron.app.isReady()?L(a):d.app.on("ready",()=>L(a))}t.updateElectronApp=B;function L(s){const{updateSource:a,updateInterval:f,logger:b,electron:h}=s;if(!H.includes(process==null?void 0:process.platform)){p(`Electron's autoUpdater does not support the '${process.platform}' platform. Ref: https://www.electronjs.org/docs/latest/api/auto-updater#platform-notices`);return}const{app:l,autoUpdater:c,dialog:j}=h;let o,O="default";switch(a.type){case m.ElectronPublicUpdateService:{o=`${a.host}/${a.repo}/${process.platform}-${process.arch}/${l.getVersion()}`;break}case m.StaticStorage:{o=a.baseUrl,process.platform==="darwin"&&(o+="/RELEASES.json",O="json");break}}const V={"User-Agent":F};function p(...$){b.log(...$)}p("feedURL",o),p("requestHeaders",V),c.setFeedURL({url:o,headers:V,serverType:O}),c.on("error",$=>{p("updater error"),p($)}),c.on("checking-for-update",()=>{p("checking-for-update")}),c.on("update-available",()=>{p("update-available; downloading...")}),c.on("update-not-available",()=>{p("update-not-available")}),s.notifyUser&&c.on("update-downloaded",($,q,A,z,W)=>{p("update-downloaded",[$,q,A,z,W]);const J={type:"info",buttons:["Restart","Later"],title:"Application Update",message:process.platform==="win32"?q:A,detail:"A new version has been downloaded. Restart the application to apply the updates."};j.showMessageBox(J).then(({response:G})=>{G===0&&c.quitAndInstall()})}),c.checkForUpdates(),setInterval(()=>{c.checkForUpdates()},(0,u.default)(f))}function C(s){var a;const f=g.default.readFileSync(I.default.join(s.app.getAppPath(),"package.json")),b=JSON.parse(f.toString()),h=((a=b.repository)===null||a===void 0?void 0:a.url)||b.repository,l=(0,R.default)(h);return(0,e.default)(l,"repo not found. Add repository string to your app's package.json file"),`${l.user}/${l.repo}`}function x(s){var a;const f={host:"https://update.electronjs.org",updateInterval:"10 minutes",logger:console,notifyUser:!0},{host:b,updateInterval:h,logger:l,notifyUser:c}=Object.assign({},f,s),j=s.electron||_;let o=s.updateSource;switch(o||(o={type:m.ElectronPublicUpdateService,repo:s.repo||C(j),host:b}),o.type){case m.ElectronPublicUpdateService:{(0,e.default)((a=o.repo)===null||a===void 0?void 0:a.includes("/"),"repo is required and should be in the format `owner/repo`"),(0,e.default)(o.host&&(0,i.default)(o.host)&&o.host.startsWith("https:"),"host must be a valid HTTPS URL");break}case m.StaticStorage:{(0,e.default)(o.baseUrl&&(0,i.default)(o.baseUrl)&&o.baseUrl.startsWith("https:"),"baseUrl must be a valid HTTPS URL");break}}return(0,e.default)(typeof h=="string"&&h.match(/^\d+/),"updateInterval must be a human-friendly string interval like `20 minutes`"),(0,e.default)((0,u.default)(h)>=5*60*1e3,"updateInterval must be `5 minutes` or more"),(0,e.default)(l&&typeof l.log,"function"),{updateSource:o,updateInterval:h,logger:l,electron:j,notifyUser:c}}})(P);P.updateElectronApp();process.env.ROOT=w.join(__dirname,"..");console.log("ROOT",process.env.ROOT);process.env.DIST=w.join(process.env.ROOT,"dist-electron");console.log("DIST",process.env.DIST);process.env.VITE_PUBLIC=process.env.VITE_DEV_SERVER_URL?w.join(process.env.ROOT,"public"):w.join(process.env.ROOT,".output/public");console.log("VITE_PUBLIC",process.env.VITE_PUBLIC);const Re=w.join(process.env.DIST,"preload.js");_.app.whenReady().then(()=>{const t=new _.BrowserWindow({title:"Vease - New project",icon:"public/favicon.ico",center:!0,webPreferences:{preload:Re,nodeIntegrationInWorker:!0,contextIsolation:!1,nodeIntegration:!0,webSecurity:!1}});process.env.VITE_DEV_SERVER_URL?(console.log("VITE_DEV_SERVER_URL",process.env.VITE_DEV_SERVER_URL),t.loadURL(process.env.VITE_DEV_SERVER_URL),t.webContents.openDevTools()):(console.log("LOAD FILE"),t.loadFile("file://./index.html"))});_.app.on("window-all-closed",()=>{_.app.quit()});
